{"ast":null,"code":"var _jsxFileName = \"/Users/mvmarco/code/mvmarco/react-calendar/src/Components/Calendar/CalendarComponent.js\",\n    _s = $RefreshSig$();\n\nimport { DAYSINWEEK, WEEKSINYEAR } from \"../../Utils/constantsCalendar\";\nimport { generateDateGrid } from \"../../Utils/dateUtils\";\nimport DateComponent from \"./DateComponent\";\nimport MonthComponent from \"./MonthComponent\";\nimport styled from \"styled-components\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CalendarComponent = ({\n  setActiveMonth,\n  activeMonth,\n  year,\n  setYear,\n  refToWrapper\n}) => {\n  _s();\n\n  // STATES\n  const [monthRowFunction, setMonthRowFunction] = useState([]);\n  const [dateGrid, setDateGrid] = useState(null);\n  /*  useEffect(() => {\n      if (activeMonth === 12) {\n        setTimeout(()=>{\n  \n        },1)\n        setYear(+year + 1);\n        refToWrapper.current.scrollTop = 0\n        setActiveMonth(0);\n      }\n    }, [activeMonth]);*/\n\n  function handleActive(weekIndex, dayIndex) {\n    let newDateGrid = [...dateGrid.map(i => [...i.map(y => [y[0], y[1], false, y[3], year])])];\n    newDateGrid[weekIndex][dayIndex][2] = true;\n    /*newDateGrid.forEach((week, i) =>\n      week.forEach((day, y) => {\n        if (i !== weekIndex && y !== dayIndex) {\n          day[2] = false;\n        }\n      })\n    );*/\n\n    setDateGrid(newDateGrid);\n  }\n\n  useEffect(() => {\n    if (dateGrid) {\n      // console.log({ dateGrid });\n      if (activeMonth < 12) {\n        let newDateGrid = [...dateGrid.map(i => [...i.map(y => [y[0], y[3] === activeMonth, y[2], y[3], year])])];\n\n        if (activeMonth === 0) {\n          const dateGrid = generateDateGrid(0, +year - 1);\n          newDateGrid.unshift(...dateGrid); // console.log(newDateGrid);\n        }\n\n        setDateGrid(newDateGrid); //here only change active month\n\n        /*    } else if (activeMonth === 0) {\n              //refToWrapper.current.style.pointerEvents = 'none'\n              setYear(+year - 1);\n              const dateGrid = generateDateGrid(11, +year - 1);\n              setDateGrid(dateGrid);\n              refToWrapper.current.scrollTop = 10000;\n              setActiveMonth(11);*/\n      } else {\n        //refToWrapper.current.style.pointerEvents = 'none'\n        setYear(+year + 1);\n        const dateGrid = generateDateGrid(0, +year + 1);\n        setDateGrid(dateGrid);\n        refToWrapper.current.scrollTop = 0;\n        setActiveMonth(0);\n      }\n    } else {\n      const dateGrid = generateDateGrid(activeMonth, year);\n      setDateGrid(dateGrid); //generate grid only once on component didmount\n    }\n  }, [activeMonth]);\n  useEffect(() => {\n    if (dateGrid) {\n      const firstDayInMonth = [];\n      const weekRowValue = [];\n\n      for (let weekIndex = 0; weekIndex < WEEKSINYEAR; weekIndex++) {\n        let weekRow = []; // from 0 to 7\n\n        for (let dayIndex = 0; dayIndex < DAYSINWEEK; dayIndex++) {\n          if (dateGrid[weekIndex][dayIndex][0] === 1) {\n            firstDayInMonth.push(weekIndex);\n          }\n\n          weekRow.push( /*#__PURE__*/_jsxDEV(DateComponent, {\n            date: dateGrid[weekIndex][dayIndex],\n            day: dayIndex,\n            month: firstDayInMonth.length,\n            dateGrid: dateGrid,\n            setActive: () => handleActive(weekIndex, dayIndex),\n            activeMonth: activeMonth\n          }, dayIndex + '' + firstDayInMonth.length, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this));\n        }\n\n        weekRowValue.push( /*#__PURE__*/_jsxDEV(Week, {\n          children: weekRow\n        }, weekIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 27\n        }, this));\n      }\n\n      let currentMonth = 1,\n          monthRow = [];\n      const newMonthRowFunction = Array(WEEKSINYEAR).fill(1).map((val, index) => {\n        if (index && index === firstDayInMonth[currentMonth]) {\n          const monthValue = /*#__PURE__*/_jsxDEV(MonthComponent, {\n            mid: currentMonth - 1,\n            setActiveMonth: setActiveMonth,\n            activeMonth: activeMonth,\n            children: monthRow\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this);\n\n          currentMonth++;\n          monthRow = [weekRowValue[index]];\n          return monthValue;\n        } else {\n          monthRow.push(weekRowValue[index]);\n        }\n      });\n      setMonthRowFunction(newMonthRowFunction);\n    }\n  }, [dateGrid]);\n  return monthRowFunction;\n}; // STYLES\n\n\n_s(CalendarComponent, \"L5GkdMOQ3531YsQotjruYqXgHAM=\");\n\n_c = CalendarComponent;\nconst Week = styled.div`\n  display: flex;\n  scroll-snap-align: start;\n`;\n_c2 = Week;\nexport default CalendarComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CalendarComponent\");\n$RefreshReg$(_c2, \"Week\");","map":{"version":3,"sources":["/Users/mvmarco/code/mvmarco/react-calendar/src/Components/Calendar/CalendarComponent.js"],"names":["DAYSINWEEK","WEEKSINYEAR","generateDateGrid","DateComponent","MonthComponent","styled","useEffect","useState","CalendarComponent","setActiveMonth","activeMonth","year","setYear","refToWrapper","monthRowFunction","setMonthRowFunction","dateGrid","setDateGrid","handleActive","weekIndex","dayIndex","newDateGrid","map","i","y","unshift","current","scrollTop","firstDayInMonth","weekRowValue","weekRow","push","length","currentMonth","monthRow","newMonthRowFunction","Array","fill","val","index","monthValue","Week","div"],"mappings":"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","sourcesContent":["import { DAYSINWEEK, WEEKSINYEAR } from \"../../Utils/constantsCalendar\";\nimport { generateDateGrid } from \"../../Utils/dateUtils\";\nimport DateComponent from \"./DateComponent\";\nimport MonthComponent from \"./MonthComponent\";\nimport styled from \"styled-components\";\nimport { useEffect, useState } from \"react\";\n\nconst CalendarComponent = ({\n  setActiveMonth,\n  activeMonth,\n  year,\n  setYear,\n  refToWrapper,\n}) => {\n  // STATES\n  const [monthRowFunction, setMonthRowFunction] = useState([]);\n  const [dateGrid, setDateGrid] = useState(null);\n\n/*  useEffect(() => {\n    if (activeMonth === 12) {\n      setTimeout(()=>{\n\n      },1)\n      setYear(+year + 1);\n      refToWrapper.current.scrollTop = 0\n      setActiveMonth(0);\n    }\n  }, [activeMonth]);*/\n\n  function handleActive(weekIndex, dayIndex) {\n    let newDateGrid = [\n      ...dateGrid.map((i) => [...i.map((y) => [y[0], y[1], false,y[3],year])]),\n    ];\n    newDateGrid[weekIndex][dayIndex][2] = true;\n    /*newDateGrid.forEach((week, i) =>\n      week.forEach((day, y) => {\n        if (i !== weekIndex && y !== dayIndex) {\n          day[2] = false;\n        }\n      })\n    );*/\n    setDateGrid(newDateGrid);\n  }\n \n\n  useEffect(() => {\n    if(dateGrid){\n      // console.log({ dateGrid });\n      if (activeMonth < 12 ) {\n        let newDateGrid = [\n          ...dateGrid.map((i) => [\n            ...i.map((y) => [y[0], y[3] === activeMonth, y[2], y[3], year]),\n          ]),\n        ];\n        if(activeMonth===0){\n\n          const dateGrid = generateDateGrid(0, +year - 1);\n          newDateGrid.unshift(...dateGrid)\n          // console.log(newDateGrid);\n        }\n        setDateGrid(newDateGrid);\n        //here only change active month\n  /*    } else if (activeMonth === 0) {\n        //refToWrapper.current.style.pointerEvents = 'none'\n        setYear(+year - 1);\n        const dateGrid = generateDateGrid(11, +year - 1);\n        setDateGrid(dateGrid);\n        refToWrapper.current.scrollTop = 10000;\n        setActiveMonth(11);*/\n      } else {\n        //refToWrapper.current.style.pointerEvents = 'none'\n        setYear(+year + 1);\n        const dateGrid = generateDateGrid(0, +year + 1);\n        setDateGrid(dateGrid);\n        refToWrapper.current.scrollTop = 0;\n        setActiveMonth(0);\n      }\n    }else{\n      const dateGrid = generateDateGrid(activeMonth, year);\n      setDateGrid(dateGrid);\n      //generate grid only once on component didmount\n    }\n    \n  }, [activeMonth]);\n\n  useEffect(() => {\n    if (dateGrid) {\n      const firstDayInMonth = [];\n      const weekRowValue = [];\n\n      for (let weekIndex = 0; weekIndex < WEEKSINYEAR; weekIndex++) {\n        let weekRow = [];\n        // from 0 to 7\n        for (let dayIndex = 0; dayIndex < DAYSINWEEK; dayIndex++) {\n          if (dateGrid[weekIndex][dayIndex][0] === 1) {\n            firstDayInMonth.push(weekIndex);\n          }\n\n          weekRow.push(\n            <DateComponent\n              key={dayIndex + '' + firstDayInMonth.length}\n              date={dateGrid[weekIndex][dayIndex]}\n              day={dayIndex}\n              month={firstDayInMonth.length}\n              dateGrid={dateGrid}\n              setActive={() => handleActive(weekIndex, dayIndex)}\n              activeMonth={activeMonth}\n            />\n          );\n        }\n        weekRowValue.push(<Week key={weekIndex}>{weekRow}</Week>);\n      }\n\n      let currentMonth = 1,\n        monthRow = [];\n\n      const newMonthRowFunction = Array(WEEKSINYEAR)\n        .fill(1)\n        .map((val, index) => {\n          if (index && index === firstDayInMonth[currentMonth]) {\n            const monthValue = (\n              <MonthComponent\n                key={index}\n                mid={currentMonth - 1}\n                setActiveMonth={setActiveMonth}\n                activeMonth={activeMonth}\n              >\n                {monthRow}\n              </MonthComponent>\n            );\n            currentMonth++;\n            monthRow = [weekRowValue[index]];\n            return monthValue;\n          } else {\n            monthRow.push(weekRowValue[index]);\n          }\n        });\n      setMonthRowFunction(newMonthRowFunction);\n    }\n  }, [dateGrid]);\n\n  return monthRowFunction;\n};\n\n// STYLES\nconst Week = styled.div`\n  display: flex;\n  scroll-snap-align: start;\n`;\n\nexport default CalendarComponent;\n"]},"metadata":{},"sourceType":"module"}