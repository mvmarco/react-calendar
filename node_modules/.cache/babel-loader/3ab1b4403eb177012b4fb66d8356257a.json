{"ast":null,"code":"import { DAYSINWEEK, MONTHSINYEAR, WEEKSINYEAR } from \"./constantsCalendar\";\nexport const checkLeapYear = year => {\n  return year % 100 === 0 ? year % 400 === 0 : year % 4 === 0;\n};\nexport const getMonthsDaysInYear = year => {\n  return [31, checkLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n};\n/* \n  Zeller's rule: finding the day of a particular date in the calendar in the history.\n  Here used to find which day (string name) is a specic day. For instance, which day of the\n  week is the 21 of December 1994: it is a thurdsay. so we now know how to populate the \n  calendar with the right day of the week for each respective day.\n  \n\n  k = to the first day of the month, our case (1) first day of the month from the costs above\n  m = to the first month after the current month we are considering, in this case January (0)\n  so february would be (1) and December (11). Values of an array.\n  D = to the last two digits of the year.  In this case 2021, D = 21.\n  C = to the first two digits of the year.  In this case 2021, C = 20.\n\n  F = to For any real number x, let [x] be the greatest integer less than or equal to x,\n      which you get by truncating any fractional part.  Then compute:\n      f = k + [(13*m-1)/5] + D + [D/4] + [C/4] - 2*C.\n      Once you have this, then  f - 7*[f/7] will give you the day of the week, with Sunday = 0,\n      Monday = 1, and so on. will give you the day of the week, with Sunday = 0, Monday = 1, \n      and so on.\n*/\n\nconst calcFirstDayofYear = (y, M = 0, k = 1) => {\n  const m = (M + 10) % 12 + 1;\n  const D = y % 100 - (m > 10 ? 1 : 0);\n  const C = Math.floor(y / 100);\n  const F = k + Math.floor((13 * m - 1) / 5) + D + Math.floor(D / 4) + Math.floor(C / 4) - 2 * C;\n  const T = F > 0 ? F : (F - (Math.floor(F) + 2) * 7) % 7;\n  return T % 7;\n};\n\nexport const generateDateGrid = (activeMonth, year) => {\n  let DAYSINMONTH = getMonthsDaysInYear(year); // 54 rows, weeks in a year that will be filled by the second function\n\n  const dateGrid = Array.from({\n    length: WEEKSINYEAR\n  }, _ => // 7 columns, days in a week\n  Array.from({\n    length: DAYSINWEEK\n  }, _ => [1, false]));\n  /* \n    in sum: dateGrid is and array containing 54 weeks (weeks in a year)\n    where each week contains an array of 7 days (days in a week)\n    which contain two values in an array, the day itself and a false value\n    as initial value. True is when the day as integer is the current day\n  */\n  // console.log('DATE GRID', dateGrid);\n\n  /* \n    the -1 after indexOfFirstWeekDayOfTheYear is a way of making the start of the first week\n    of the year on friday (index 4 of the array) instead of satuday (index 5 of the array). \n    The reason why it was set to index 5 is because the british have the week starting\n    on sunday, so index 5 was actually friday.\n    it is a trick that consider also the leap year too, so using 2020 is fine.\n  */\n\n  let indexOfFirstWeekDayOfTheYear = calcFirstDayofYear(year) - 1; //let firstday = indexOfFirstWeekDayOfTheYear;\n\n  if (indexOfFirstWeekDayOfTheYear === -1) {\n    indexOfFirstWeekDayOfTheYear = 6;\n  } //console.log({ indexOfFirstWeekDayOfTheYear, firstday });\n  // To populate the first week of the grid\n\n\n  for (let i = 0; i < indexOfFirstWeekDayOfTheYear; i++) {\n    /* \n      - recap considering the 1 of january 2021.\n      - indexOfFirstWeekDayOfTheYear is 4 (index for friday)\n      - dateGrid is the array containing 54 weeks in a year, with inside another array of 7 weeks\n        and inside the current day in integer and true/false value corresponding on the current\n        day\n       here below you take, the first week, the current index and the current day in integer,\n      so if it is the 1 JANUARY you say: 1 \n      DAYSINMONTH is an array corresponding to how many days are in a month so it is like\n      0:31, 1: 28 etc etc\n    */\n    dateGrid[0][i][0] = DAYSINMONTH[11] - (indexOfFirstWeekDayOfTheYear - 1) + i;\n  }\n\n  let weekValue = 0,\n      k = indexOfFirstWeekDayOfTheYear; // MONTHSINYEAR is 12\n\n  for (let i = 0; i < MONTHSINYEAR; i++) {\n    //DAYSINMONTH[i] you take the respective days in each month\n    for (let j = 0; j < DAYSINMONTH[i]; j++) {\n      // console.log(dateGrid[weekValue]);\n      if (dateGrid[weekValue][k]) {\n        dateGrid[weekValue][k][0] = j + 1; // for a respective day integer of the week = ?\n\n        dateGrid[weekValue][k][1] = i === activeMonth;\n        dateGrid[weekValue][k][3] = i;\n        k++;\n\n        if (k === DAYSINWEEK) {\n          k = 0;\n          weekValue++;\n        }\n      }\n    }\n  } // To populate the last row of the date grid\n\n\n  for (let i = k; i < DAYSINWEEK; i++) {\n    if (dateGrid[weekValue][i]) {\n      dateGrid[weekValue][i][0] = i - k + 1;\n    } //  console.log(i, k);\n\n  }\n\n  return dateGrid;\n};\n;","map":{"version":3,"sources":["/Users/mvmarco/code/mvmarco/react-calendar/src/Utils/dateUtils.js"],"names":["DAYSINWEEK","MONTHSINYEAR","WEEKSINYEAR","checkLeapYear","year","getMonthsDaysInYear","calcFirstDayofYear","y","M","k","m","D","C","Math","floor","F","T","generateDateGrid","activeMonth","DAYSINMONTH","dateGrid","Array","from","length","_","indexOfFirstWeekDayOfTheYear","i","weekValue","j"],"mappings":"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","sourcesContent":["import {\n  DAYSINWEEK,\n  MONTHSINYEAR,\n  WEEKSINYEAR,\n} from \"./constantsCalendar\";\n\nexport const checkLeapYear = (year) => {\n  return year % 100 === 0 ? year % 400 === 0 : year % 4 === 0;\n};\n\nexport const getMonthsDaysInYear = (year) => {\n  return [\n    31,\n    checkLeapYear(year) ? 29 : 28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31,\n  ];\n};\n\n/* \n  Zeller's rule: finding the day of a particular date in the calendar in the history.\n  Here used to find which day (string name) is a specic day. For instance, which day of the\n  week is the 21 of December 1994: it is a thurdsay. so we now know how to populate the \n  calendar with the right day of the week for each respective day.\n  \n\n  k = to the first day of the month, our case (1) first day of the month from the costs above\n  m = to the first month after the current month we are considering, in this case January (0)\n  so february would be (1) and December (11). Values of an array.\n  D = to the last two digits of the year.  In this case 2021, D = 21.\n  C = to the first two digits of the year.  In this case 2021, C = 20.\n\n  F = to For any real number x, let [x] be the greatest integer less than or equal to x,\n      which you get by truncating any fractional part.  Then compute:\n      f = k + [(13*m-1)/5] + D + [D/4] + [C/4] - 2*C.\n      Once you have this, then  f - 7*[f/7] will give you the day of the week, with Sunday = 0,\n      Monday = 1, and so on. will give you the day of the week, with Sunday = 0, Monday = 1, \n      and so on.\n*/\nconst calcFirstDayofYear = (y, M = 0, k = 1) => {\n  const m = ((M + 10) % 12) + 1;\n  const D = (y % 100) - (m > 10 ? 1 : 0);\n  const C = Math.floor(y / 100);\n  const F =\n    k +\n    Math.floor((13 * m - 1) / 5) +\n    D +\n    Math.floor(D / 4) +\n    Math.floor(C / 4) -\n    2 * C;\n  const T = F > 0 ? F : (F - (Math.floor(F) + 2) * 7) % 7;\n  return T % 7;\n};\n\nexport const generateDateGrid = (activeMonth, year) => {\n  let DAYSINMONTH = getMonthsDaysInYear(year);\n\n  // 54 rows, weeks in a year that will be filled by the second function\n  const dateGrid = Array.from({ length: WEEKSINYEAR }, (_) =>\n    // 7 columns, days in a week\n    Array.from({ length: DAYSINWEEK }, (_) => [1, false])\n  );\n\n  /* \n    in sum: dateGrid is and array containing 54 weeks (weeks in a year)\n    where each week contains an array of 7 days (days in a week)\n    which contain two values in an array, the day itself and a false value\n    as initial value. True is when the day as integer is the current day\n  */\n  // console.log('DATE GRID', dateGrid);\n\n  /* \n    the -1 after indexOfFirstWeekDayOfTheYear is a way of making the start of the first week\n    of the year on friday (index 4 of the array) instead of satuday (index 5 of the array). \n    The reason why it was set to index 5 is because the british have the week starting\n    on sunday, so index 5 was actually friday.\n    it is a trick that consider also the leap year too, so using 2020 is fine.\n  */\n\n  let indexOfFirstWeekDayOfTheYear = calcFirstDayofYear(year)-1;\n  //let firstday = indexOfFirstWeekDayOfTheYear;\n  if (indexOfFirstWeekDayOfTheYear===-1){\n    indexOfFirstWeekDayOfTheYear = 6;\n  }\n    //console.log({ indexOfFirstWeekDayOfTheYear, firstday });\n  // To populate the first week of the grid\n  for (let i = 0; i < indexOfFirstWeekDayOfTheYear; i++) {\n    /* \n      - recap considering the 1 of january 2021.\n      - indexOfFirstWeekDayOfTheYear is 4 (index for friday)\n      - dateGrid is the array containing 54 weeks in a year, with inside another array of 7 weeks\n        and inside the current day in integer and true/false value corresponding on the current\n        day\n\n      here below you take, the first week, the current index and the current day in integer,\n      so if it is the 1 JANUARY you say: 1 \n      DAYSINMONTH is an array corresponding to how many days are in a month so it is like\n      0:31, 1: 28 etc etc\n    */\n    dateGrid[0][i][0] =\n      DAYSINMONTH[11] - (indexOfFirstWeekDayOfTheYear - 1) + i;\n  }\n\n  let weekValue = 0,\n    k = indexOfFirstWeekDayOfTheYear;\n  // MONTHSINYEAR is 12\n  for (let i = 0; i < MONTHSINYEAR; i++) {\n    //DAYSINMONTH[i] you take the respective days in each month\n    for (let j = 0; j < DAYSINMONTH[i]; j++) {\n      // console.log(dateGrid[weekValue]);\n      if (dateGrid[weekValue][k]) {\n        dateGrid[weekValue][k][0] = j + 1; // for a respective day integer of the week = ?\n        dateGrid[weekValue][k][1] = i === activeMonth;\n        dateGrid[weekValue][k][3] = i;\n        k++;\n        if (k === DAYSINWEEK) {\n          k = 0;\n          weekValue++;\n        }\n      }\n    }\n  }\n\n  // To populate the last row of the date grid\n  for (let i = k; i < DAYSINWEEK; i++) {\n    if (dateGrid[weekValue][i]) {\n      dateGrid[weekValue][i][0] = i - k + 1;\n    }\n    //  console.log(i, k);\n  }\n  return dateGrid;\n};;\n"]},"metadata":{},"sourceType":"module"}