{"ast":null,"code":"var _jsxFileName = \"/Users/mvmarco/code/mvmarco/react-calendar/src/Components/Calendar/MonthComponent.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { DATE, MONTH } from \"../../Utils/constantsCalendar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MonthComponent = props => {\n  _s();\n\n  const monthRef = useRef(); // 214\n\n  useEffect(() => {\n    let obs = new IntersectionObserver(entries => {\n      entries.forEach((entry, index) => {\n        //console.log(props)\n        if (entry.intersectionRatio >= 0.7) {\n          props.setActiveMonth(props.mid);\n        }\n      });\n    }, {\n      root: document.querySelector(\".calendarContainer\"),\n      rootMargin: \"0px\",\n      threshold: 0.8\n    });\n    obs.observe(monthRef.current);\n  }, []);\n  useEffect(() => {\n    const monthRefValue = monthRef && monthRef.current;\n\n    if (monthRefValue) {\n      if (props.mid === DATE.getMonth()) {\n        monthRefValue.scrollIntoView();\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Months, {\n    id: MONTH[props.mid],\n    ref: monthRef,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}; // STYLES month name \n\n\n_s(MonthComponent, \"TYSWFL4uB/I5luuaJKL9xEzUGHw=\");\n\n_c = MonthComponent;\nconst Months = styled.div`\n  scroll-snap-align: start;\n  /* color: #2a8282; */\n`;\n_c2 = Months;\nexport default MonthComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MonthComponent\");\n$RefreshReg$(_c2, \"Months\");","map":{"version":3,"sources":["/Users/mvmarco/code/mvmarco/react-calendar/src/Components/Calendar/MonthComponent.js"],"names":["useEffect","useRef","styled","DATE","MONTH","MonthComponent","props","monthRef","obs","IntersectionObserver","entries","forEach","entry","index","intersectionRatio","setActiveMonth","mid","root","document","querySelector","rootMargin","threshold","observe","current","monthRefValue","getMonth","scrollIntoView","children","Months","div"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,+BAA5B;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAMC,QAAQ,GAAGN,MAAM,EAAvB,CADgC,CAEhC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,GAAG,GAAG,IAAIC,oBAAJ,CACPC,OAAD,IAAa;AACXA,MAAAA,OAAO,CAACC,OAAR,CAAgB,CAACC,KAAD,EAAOC,KAAP,KAAiB;AAC/B;AACA,YAAID,KAAK,CAACE,iBAAN,IAA2B,GAA/B,EAAoC;AAClCR,UAAAA,KAAK,CAACS,cAAN,CAAqBT,KAAK,CAACU,GAA3B;AACD;AACF,OALD;AAMD,KARO,EASR;AACEC,MAAAA,IAAI,EAAEC,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,CADR;AAEEC,MAAAA,UAAU,EAAE,KAFd;AAGEC,MAAAA,SAAS,EAAE;AAHb,KATQ,CAAV;AAeAb,IAAAA,GAAG,CAACc,OAAJ,CAAYf,QAAQ,CAACgB,OAArB;AACD,GAjBQ,EAiBP,EAjBO,CAAT;AAmBAvB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,aAAa,GAAGjB,QAAQ,IAAIA,QAAQ,CAACgB,OAA3C;;AACA,QAAGC,aAAH,EAAkB;AAChB,UAAGlB,KAAK,CAACU,GAAN,KAAcb,IAAI,CAACsB,QAAL,EAAjB,EAAkC;AAChCD,QAAAA,aAAa,CAACE,cAAd;AACD;AACF;AACF,GAPQ,EAON,EAPM,CAAT;AAQA,sBACE,QAAC,MAAD;AAAQ,IAAA,EAAE,EAAEtB,KAAK,CAACE,KAAK,CAACU,GAAP,CAAjB;AAA8B,IAAA,GAAG,EAAET,QAAnC;AAAA,cACGD,KAAK,CAACqB;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnCD,C,CAoCA;;;GApCMtB,c;;KAAAA,c;AAqCN,MAAMuB,MAAM,GAAG1B,MAAM,CAAC2B,GAAI;AAC1B;AACA;AACA,CAHA;MAAMD,M;AAIN,eAAevB,cAAf","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { DATE, MONTH } from \"../../Utils/constantsCalendar\";\n\nconst MonthComponent = (props) => {\n  const monthRef = useRef();\n  // 214\n  useEffect(() => {\n    let obs = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry,index) => {\n          //console.log(props)\n          if (entry.intersectionRatio >= 0.7) {\n            props.setActiveMonth(props.mid);\n          }\n        });\n      },\n      {\n        root: document.querySelector(\".calendarContainer\"),\n        rootMargin: \"0px\",\n        threshold: 0.8,\n      }\n    );\n    obs.observe(monthRef.current);\n  },[]);\n\n  useEffect(() => {\n    const monthRefValue = monthRef && monthRef.current;\n    if(monthRefValue) {\n      if(props.mid === DATE.getMonth()) {\n        monthRefValue.scrollIntoView();\n      }\n    }\n  }, [])\n  return (\n    <Months id={MONTH[props.mid]} ref={monthRef}>\n      {props.children}\n    </Months>\n  );\n};\n// STYLES month name \nconst Months = styled.div`\n  scroll-snap-align: start;\n  /* color: #2a8282; */\n`;\nexport default MonthComponent;\n"]},"metadata":{},"sourceType":"module"}